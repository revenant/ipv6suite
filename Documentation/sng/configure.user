#
# configure.user
#
# This file contains additional input for 'configure'. It is read (sourced)
# during the configuration process. You are free to edit the settings in here.
#
# The settings in this file are all optional in the sense that they all
# have reasonable default values in the configure script.
#

#
# Edit here if you want to use a different compiler than the one autodetected
# by configure.
#
#CC=/usr/local/gcc/4.0.1/bin/gcc
#CXX=/usr/local/gcc/4.0.1/bin/g++

#
# Compiler optimization switches. Choose -O3 for speed, -g for debugging the libs.
# (Note: For maximum debugging info use switch -ggdb or -gstabs+3 when using gcc and gdb)
# With gcc, do NOT use --omit-frame-pointer (it crashes when coroutines and
# C++ exceptions (throw/catch) are used together)!
#
#CFLAGS='-g -Wno-unused'
#CFLAGS='-g -Wall'
CFLAGS='-gstabs+3 -Wall -m32'
#CFLAGS='-O2 -DNDEBUG=1'

NO_TCL=true
SHLIB_LD='g++ -shared -fPIC -m32'
LDFLAGS="-m32 -L/nfs/0/home/netsimuser/lib"


#
# CFLAGS for simulation models: opp_makemake will generate Makefiles with this
# value as CFLAGS. If left empty, it defaults to the above CFLAGS setting.
#
USER_CFLAGS=

# To suppress the 'unused variable' warnings in ned-generated _n.cc files
# -Wno-unused is added to NEDCFLAGS
NEDCFLAGS='-Wno-unused'

#
# Select here whether you want to build static or shared libraries.
# If you change this setting, remember to delete the other set of libraries
# (or at least the soft links from lib/).
# On Windows (Cygwin or MinGW), only static libraries can be used. The default
# setting is `if-not-windows'.
#
#build_shared_libs=yes
#build_shared_libs=no

#
# It is possible to have the Tcl files embedded into the compiled OMNeT++
# libraries and executables. This can be useful if you want to ship
# self-contained standalone executables which do not rely on external
# Tcl scripts. This option affects Tkenv, GNED, Scalars and Plove.
#
EMBED_TCL_CODE=yes

#
# Set to "yes" to enable simulation executables load NED files dynamically.
#
WITH_NETBUILDER=yes

#
# Set to "yes" to enable the parallel distributed simulation feature.
#
WITH_PARSIM=no

#
# Compiler and linker options for Tcl/Tk
#
# You can explicitly tell 'configure' which compile switches (TK_CFLAGS)
# and linker switches (TK_LIBS) are needed to build an application with Tcl/Tk.
# Normally these settings are autodetected by 'configure', so you only need to
# edit here if autodetection doesn't work.
#
# With gcc, settings typically look like this:
#
# TK_CFLAGS="-I/usr/local/include"
# TK_LIBS="-L/usr/local/lib -ltk8.4 -ltcl8.4"
#
# /usr/local/include should be replaced with the directory where tcl.h and tk.h
# live. If they are in two different directories, use two -I switches.
#
# /usr/local/lib should be replaced with the directory that contains the Tcl/Tk
# library files (something like libtcl84.so, libtk8.4.a etc; search for libtcl*
# and libtk* to find them.) The -l options contain the library names: the
# library file names, with the leading 'lib' and trailing '.so*' or '.a*' cut
# off. Sometimes you need to explicitly link with the X11 libraries too, in that
# case add -lX11 to TK_LIBS.
#
# With MinGW I use the following:
#  TK_CFLAGS="-I/d/home/tools/Tcl-8.4.5/include"
#  TK_LIBS="-L/d/home/tools/Tcl-8.4.5/lib -ltk84 -ltcl84"
# With Cygwin, you can try:
#  TK_CFLAGS=
#  TK_LIBS="-ltk84 -ltcl84"
#
# If commented out, the configure script will try to autodetect it
#
# If you don't have Tcl/Tk installed, adding 
#  NO_TCL=true
# below lets you build just the non-GUI components.
#
#TK_CFLAGS=
#TK_LIBS=

#
# BLT is a Tcl/Tk extension needed by the Scalars, Plove and Tkenv components
# of OMNeT++. BLT 2.4z is required. BLT_LIBS should contain the -l flag
# for BLT. Default setting is:
#  BLT_LIBS="-lBLT24"
#
#BLT_LIBS=

#
# Compiler and linker options for MPI (optional component).
# On LAM/MPI, typing `mpic++ -showme' can give you a hint about MPI_LIBS.
#
# If commented out, the configure script will try to autodetect it
#
#MPI_CFLAGS="-I /usr/include"
#MPI_LIBS="-pthread -llammpio -llammpi++ -llamf77mpi -lmpi -llam -laio -laio -lutil"
#MPI_LIBS="-lmpi++ -lmpi"   #SGI

#
# Compiler and linker options for Expat (optional component)
#
# With MinGW I use the following:
#   EXPAT_CFLAGS="-I/d/home/tools/expat-1.95.2/Source/lib"
#   EXPAT_LIBS="-L/d/home/tools/expat-1.95.2/libs -lexpat"
# If commented out, the configure script will try to autodetect it
#
#EXPAT_CFLAGS=
#EXPAT_LIBS=

#
# Compiler and linker options for LIBXML (optional component)
#
# With MinGW I use the following:
#  LIBXML_CFLAGS="-I/d/home/tools/libxml2-2.4.26.win32/include"
#  LIBXML_LIBS="-L/d/home/tools/libxml2-2.4.26.win32/lib -lxml2 -L/d/home/tools/iconv-1.8.win32/lib -liconv"
# If commented out, the configure script will try to autodetect it
#
#LIBXML_CFLAGS=
#LIBXML_LIBS=

#
# Compiler and linker options for Akaroa (optional component)
#
# With MinGW I use the following:
#  AKAROA_CFLAGS="-I/d/home/tools/akaroa-2.7.2/src/include"
#  AKAROA_LIBS="-L/d/home/tools/akaroa-2.7.2/lib/include -lakaroa"
# If commented out, the configure script will try to autodetect it
#
#AKAROA_CFLAGS=
#AKAROA_LIBS=

#
# The following OMNETPP_* variables don't need to be touched unless
# you want to relocate parts of the package (e.g. put libraries to
# /usr/lib, include files to /usr/include/omnetpp, and so on).
#
#OMNETPP_SRC_DIR="$OMNETPP_ROOT/src"
#OMNETPP_SAMPLES_DIR="$OMNETPP_ROOT/samples"
#OMNETPP_BIN_DIR="$OMNETPP_ROOT/bin"
#OMNETPP_INCL_DIR="$OMNETPP_ROOT/include"
#OMNETPP_LIB_DIR="$OMNETPP_ROOT/lib"

#
# Some more OMNeT++ variables. They select the programs opp_makemake-generated
# makefiles will use. (They get default values if commented out.)
#
NEDC="$OMNETPP_BIN_DIR/nedtool"
#MSGC="$OMNETPP_BIN_DIR/opp_msgc"

#
#
# Override the following setting if you have additional icons somewhere else.
#
#OMNETPP_BITMAP_PATH="./bitmaps;$OMNETPP_ROOT/bitmaps"


