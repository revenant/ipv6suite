#!/usr/bin/env ruby
File.open("debug.txt", "w"){|f|
  f.puts <<END
bt
f 4
l
q
END
}
hash = {}
runs = {}
dumps = []
exe = File.basename(Dir.pwd)
corecount = 0
runlines = []
Dir["core.*"].each{|corefile|
  next if corefile !~ /[.]\d+$/
  dump = `gdb #{exe} -q -x debug.txt #{corefile}|grep ^\#`
  runline = `gdb #{exe} -q -x debug.txt #{corefile}|grep "Core was"`
#Core was generated by `./voip -f Voip_hmip_2pc_efr_15_20_20_n.ini -r19'
  runlines << runline.split('`')[1].split("'")[0]
  if dump =~ /\?\?/m
    puts "#{corefile} is stuffed i.e. no bt so deleting"
    File.delete(corefile)
  else

    #omit address of frame pointer and argument addresses which vary across process
    #invocations as we used different seeds

    dump.gsub!(/(\s[[:xdigit:]]x[[:xdigit:]]+\s)|\S[[:xdigit:]]x[[:xdigit:]]+/," ")
    dump.gsub!(/\s[[:xdigit:]]x[[:xdigit:]]+\S|=\d+[.]\d+/," ")
    dumps << dump if not dumps.include?(dump)
    index = dumps.index(dump)

#sample line
#Core was generated by `./wcmc -f wcmc_y_y_y_y_y_13.ini -r 39'.
    run = `gdb #{exe} -q -x debug.txt #{corefile}|grep ^Core`
    run = run.split("`")[1].split("'")[0]
    if hash.include? index
      hash[index] << corefile 
      runs[index] << run
    else
      hash[index] = [corefile]
      runs[index] = [run]
    end
    corecount = corecount + 1
  end
} #en each core file

File.open("redoruns.txt", "w"){|f|
  #embedded newline in runlines
  f.puts runlines.join("")
}

puts "There were #{dumps.size} unique dumps out of #{corecount}"
#puts dumps.to_s
hash.each{|k,v|
  puts v[0] + " belongs to dump #{k} which is: " 
  dump = `gdb #{exe} -q -x debug.txt #{v[0]}`
  puts dump.match(/(^\#.+$)|(^\s+.+$)/m)[0]
  puts dump.gsub!(/(^[^\s\#].+$)?/, "")
  v.each_index{|i| 
    next if i == 0
    File.delete(v[i])
  }
}

sorted = runs.sort_by { |k,v| -v.length }
sorted.each { |k,v| puts "dump #{k} has #{v.length} dumps" }
puts "Need to rerun after fixing "
runs.each{|k,v|
  puts "dump #{k}:"
  puts v.join("\n")
}
File.open("resubmit.txt","w"){|f|
sorted.each{|k,v| f.puts v.join("\n") }
}
#todo iterate dumps by index and output the line numbers for the first corefile
#in hash[index]
